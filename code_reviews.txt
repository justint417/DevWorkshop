1.
Similarities 
The concepts that are similar between the two guidelines are that code reviews should be small so that you can iterate more quickly and accurately.
Another similarity is that both guidelines say to review your own code for errors and create an actual pull request to see your code like the reviewer will. 
Differences
One difference is that Microsoft emphasizes the importance of tone in a review because of how it can it can foster understanding of what actually is the issue. 
Another difference is Yelp says to make sure the code is safe to deploy.  

2. 
Link to review: https://codereview.stackexchange.com/questions/291360/space-shooter-game-using-pygame

The review explained small improvements that could be made to the code such as the danger of using a global variable, a simpler api to get a path of the file, and
importing the function name instead of the file that contains the function so you not have to repeat the file name whenever calling the function. The review was well
organized with headers for each section that they reviewed making it easy to navigate to one section of the review. The reviewer wrote in a friendly manner that 
encourages the coder to make the fixes according to the reviewers suggestions.

3. 
Link to review: https://codereview.stackexchange.com/questions/291349/sql-query-running-time-can-this-be-optimized

This review is a example of a bad code review because of shorcomings on the code submitters part. According to the Yahoo tips from before, submitter should provide context for the code that they want reviewed. The person who asked for this code to be reviewed simply posted the code and ask for it to be optimized without explaiing its purpose. This adds unnecessary burden to the reviewers and slows down the reviewing process. Reviewers were not able to provide beneficial feedback due to the lack of context. In the future, the submitter should briefly explain code functionality and provide more details about how they want their code improved.
